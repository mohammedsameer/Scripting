
NEWER
NEWESR
NEWS
Java 8 advantages through lamda:
1. Easy to read code
2. Functional programming

Lamda:
A block of code to be executed at a later time interval.

Concepts:
Functional Interfaces: An interface with single abstract method
E.g:
Old:
public class NonLamda implements Runnable {
   public void run() {
     System.out.println(“Hi, there!”);
  }
}

NonLamda  nL = new NonLamda();
new Thread(nL).start();

New: 
Functional Interface
public class Lamda implements Runnable {
   public void run() {
     System.out.println(“Hi, there!”);
  }
}

Runnable lamdaWorker = ()->{System.out.println(“Hi, there!”);}
Note: If the execution throws the exception, the left handside should also throw an exception.

Method References: Shorthand to specify method. Allows reusing methods instead of needing to define a new one.
           object: instanceMethod
           class: staticMethod
           class:instanceMethod
           
Eg:
Class StringCompare implements Comparator<String>{
   public int compare(String x, String y) {
      if(x.compareToIgnoreCase(y)) return 1;
      else if (y.compareToIgnoreCase(x)) return -1;
      else return 0;
   }
}

Old:
List<String> strings = ...
Arrays.sort(strings, new StringCompare());

New:
Arrays.sort(strings, (x,y)->{x.compareToIgnoreCase(y)}); {Functional Reference}
Arrays.sort(strings, String::compareToIgnoreCase); {Method Reference}

Constructor Reference: Shorthand to specify new instance method. This can be used with interfaces with single abstract method.
E.g: 
interface FuncInt{
 int[] func(int num);
}

Old:
Class FuncImpl implements FuncInt {
     int[] func(int num) {
      //do something
     }
}
public static void main(String[] args) {
 FuncInt funcInt = new FuncImpl();
}

New:
public static void main(String[] args) {
 FuncInt funcInt = int[]:new;
}

Variable Scope:  Lamda expressions can access free variables. Free variables are those that are not parameters to lamda expression, but instead are parameters to function containing  lamda expression.
E.g:
public static void printName(String firstName, String lastName) {
  Runnable r = ()->{System.out.println(“FirtName”+ firstName)};
 new Thread(r).start();
}
printName(“Mohammed”,”Sameer”);

Default Methods: Interface methods with concrete implementation. E.g: forEach in Collections.
E.g: 
List<String> names = new ArrayList<String>();
names.forEach((name)->{System.out.println(“Student name:”+ name});
or
names.forEach(System.out::println);

Static Methods in Interface: Advantages, includes, if you have a utility interface you don’t  need a class implementation.
E.g:
public interface printer{
 public static void printName(String name){
   System.out.print(“Student name”+ name);
 }
}